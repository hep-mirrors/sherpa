# Original author: Valentin Boettcher <hiro@protagon.space> (Gitlab: vale9811)
# Rewritten by: Andrii Verbytskyi andrii.verbytskyi@mpp.mpg.de

stages:
  - check_if_dockerfile_updated
  - build_docker_image
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOXYGEN_CMAKE_FLAGS: -DSHERPA_ENABLE_DOXYGEN=ON -DDOXYGEN_WARN_AS_ERROR=YES
  CATCH2_CMAKE_FLAGS: -DSHERPA_ENABLE_CATCH2:BOOL=ON -DSHERPA_ENABLE_COVERAGE:BOOL=ON
  COMMON_EXTRA_CMAKE_FLAGS: -DSHERPA_ENABLE_EWSUD:BOOL=ON -DSHERPA_ENABLE_TESTING:BOOL=ON
  EXTENDED_EXTRA_CMAKE_FLAGS: -DSHERPA_ENABLE_ANALYSIS:BOOL=ON -DSHERPA_ENABLE_BINRELOC:BOOL=ON -DSHERPA_ENABLE_BLACKHAT:BOOL=ON -DSHERPA_ENABLE_DIHIGGS:BOOL=OFF -DSHERPA_ENABLE_EXAMPLES:BOOL=ON -DSHERPA_ENABLE_GOSAM:BOOL=ON -DSHERPA_ENABLE_GZIP:BOOL=ON -DSHERPA_ENABLE_HEPMC3:BOOL=ON -DSHERPA_ENABLE_HEPMC3_ROOT:BOOL=OFF -DSHERPA_ENABLE_INTERNAL_PDFS:BOOL=ON -DSHERPA_ENABLE_INSTALL_LIBZIP:BOOL=OFF -DSHERPA_ENABLE_INSTALL_LHAPDF:BOOL=OFF -DSHERPA_ENABLE_LHOLE:BOOL=ON -DSHERPA_ENABLE_MADLOOP:BOOL=ON -DSHERPA_ENABLE_MANUAL:BOOL=OFF -DSHERPA_ENABLE_MCFM:BOOL=OFF -DSHERPA_ENABLE_MPI:BOOL=OFF -DSHERPA_ENABLE_OPENLOOPS:BOOL=ON -DSHERPA_ENABLE_PYTHIA8:BOOL=ON -DSHERPA_ENABLE_PYTHON:BOOL=ON -DSHERPA_ENABLE_RECOLA:BOOL=ON -DSHERPA_ENABLE_RIVET:BOOL=ON -DSHERPA_ENABLE_ROOT:BOOL=ON -DSHERPA_ENABLE_THREADING:BOOL=ON -DSHERPA_ENABLE_UFO:BOOL=ON
  NCOMPILATION_JOBS: 1
  MAKE_FLAGS: -j4
  # Cache optimization settings
  CCACHE_MAXSIZE: 500M
  CCACHE_COMPRESS: 1
  CCACHE_COMPILERCHECK: content

build-manual:
  stage: build
  image: $CI_REGISTRY_IMAGE:Fedora_41
  script:
    - cmake3 -S . -B build  -DSHERPA_ENABLE_MANUAL=ON -DLibZip_DIR=/usr -DSHERPA_ENABLE_INSTALL_LHAPDF:BOOL=ON
    - cd build/Manual
    - make
    - make sherpamanual_html
  artifacts:
    expire_in: 2 days
    paths:
      - build/Manual
  rules:
    - changes:
        - Manual/**/*
      if: '$CI_SERVER_HOST=="gitlab.com"'
      when: always
    - when: never

#
# Deploy
#

# Rebuild the Website to include this tag in the changelogs.
trigger_pages:
  stage: deploy
  variables:
    GIT_STRATEGY: none  # we only need the artifacts from the build
  rules:
    - if: '$CI_COMMIT_TAG && $CI_SERVER_HOST=="gitlab.com"'
      when: always
    - when: never
  script:
    - "curl -X POST -F token=$PAGES_TRIGGER_TOKEN -F ref=master https://gitlab.com/api/v4/projects/8892644/trigger/pipeline"
  needs: []

# Build Manual
pages:
  image: $CI_REGISTRY_IMAGE:Fedora_42
  stage: deploy
  script:
    - cd Manual
    # only include the manual for recent branches, i.e. any that include one of the last 50 master commits
    - git branch -r --contains 'origin/master~50' | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
    - git fetch --all
    - git checkout master  # we only build with master config, because
                           # this will get uploaded globaly
    - git pull
    - bash .build_versioned.sh build
    - mv build/_multi ../public
  artifacts:
    paths:
      - public
    expire_in: 90 days
  rules:
    - changes:
        - Manual/**/*
      if: '$CI_SERVER_HOST=="gitlab.com"'
      when: always
    - when: never

##########################################################################
##########################################################################

LCG_106_ATLAS_7_x86_64-el9-gcc13-opt:
  only:
    variables:
     - $CI_SERVER_HOST=="gitlab.cern.ch"
  image: gitlab-registry.cern.ch/sft/docker/alma9-core:latest
  tags:
    - k8s-cvmfs
  stage: build
  script:
      - export NCOMPILATION_JOBS=8
      - export RELPATH=/cvmfs/sft.cern.ch/lcg/releases/LCG_106_ATLAS_7
      - export LCGPLATFORM=x86_64-el9-gcc13-opt
      - set -x
      - export S_ROOT=6.32.02
      - export S_HEPMC3=3.2.7
      - export S_PYTHIA8=312.atlas1
      - export S_RIVET=4.0.1
      - export S_YODA=2.0.1
      - export S_MG5=3.3.1.atlas3
      - export S_OPENLOOPS=2.1.2
      - export S_RECOLA=2.2.0
      - export S_GOSAM=2.1.1
      - export S_LHAPDF=6.5.4
      - export S_PYTHON=3.11.9
      - export S_LIBZIP=1.9.2
      - export S_MATPLOTLIB=3.8.3
      - export S_SWIG=4.0.2
      - export PATH=$RELPATH/swig/${S_SWIG}/${LCGPLATFORM}/bin:/cvmfs/sft.cern.ch/lcg/contrib/CMake/3.26.2/Linux-x86_64/bin/:$PATH
      - set +x
      - source $RELPATH/../gcc/13.1.0/x86_64-el9/setup.sh
      - source $RELPATH/swig/${S_SWIG}/${LCGPLATFORM}/swig-env.sh
      - source $RELPATH/ROOT/${S_ROOT}/${LCGPLATFORM}/bin/thisroot.sh
      - source $RELPATH/Python/${S_PYTHON}/${LCGPLATFORM}/Python-env.sh
      - source $RELPATH/matplotlib/${S_MATPLOTLIB}/${LCGPLATFORM}/matplotlib-env.sh
      - source $RELPATH/MCGenerators/rivet/${S_RIVET}/${LCGPLATFORM}/rivetenv.sh
      - set -x
      - which -a g++
      - which -a cmake
      - which -a gzip
      - LARG=" "
      - LARG="$LARG "-DCMAKE_INSTALL_PREFIX=$(pwd)/install
      - LARG="$LARG "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - LARG="$LARG "-DHepMC3_DIR=$RELPATH/hepmc3/$S_HEPMC3/${LCGPLATFORM}/share/HepMC3/cmake/
      - LARG="$LARG "-DSHERPA_ENABLE_INSTALL_LIBZIP=OFF
      - LARG="$LARG "-DLibZip_DIR=$RELPATH/libzip/$S_LIBZIP/${LCGPLATFORM}
      - LARG="$LARG "-DPYTHIA8_DIR=$RELPATH/MCGenerators/pythia8/$S_PYTHIA8/${LCGPLATFORM}
      - LARG="$LARG "-DRIVET_DIR=$RELPATH/MCGenerators/rivet/$S_RIVET/${LCGPLATFORM}
      - LARG="$LARG "-DYODA_DIR=$RELPATH/MCGenerators/yoda/$S_YODA/${LCGPLATFORM}
      - LARG="$LARG "-DOPENLOOPS_DIR=$RELPATH/MCGenerators/openloops/$S_OPENLOOPS/${LCGPLATFORM}/
      - LARG="$LARG "-DSHERPA_ENABLE_RECOLA=OFF
      - LARG="$LARG "-DLHAPDF_DIR=$RELPATH/MCGenerators/lhapdf/$S_LHAPDF/${LCGPLATFORM}/
      - LARG="$LARG "-DMADLOOP_DIR=$RELPATH/MCGenerators/madgraph5amc/$S_MG5/${LCGPLATFORM}/
      - LARG="$LARG "-DGOSAM_DIR=$RELPATH/MCGenerators/gosam/$S_GOSAM/${LCGPLATFORM}/
      - LARG="$LARG "-DSHERPA_ENABLE_ROOT=OFF
      - LARG="$LARG "-DSHERPA_ENABLE_HEPMC3_ROOT=OFF
      - LARG="$LARG "-DSHERPA_ENABLE_PYTHON=ON
      - LARG="$LARG "-DSHERPA_ENABLE_MCFM=OFF
      - LARG="$LARG "-DSHERPA_ENABLE_MANUAL=OFF
      - LARG="$LARG "-DSHERPA_ENABLE_THREADING=OFF
      - LARG="$LARG "-DSHERPA_ENABLE_BLACKHAT=OFF
      - LARG="$LARG "-DSHERPA_ENABLE_EWSUD:BOOL=ON
      - LARG="$LARG "-DSHERPA_ENABLE_TESTING:BOOL=ON
      - LARG="$LARG "-DSHERPA_ENABLE_INTERNAL_PDFS:BOOL=OFF
      - LARG="$LARG "-DSHERPA_ENABLE_UFO:BOOL=ON
      - export LHAPDF_DATA_PATH=$LHAPDF_DATA_PATH:/cvmfs/sft.cern.ch/lcg/external/lhapdfsets/current
      - export LHAPATH=$LHAPATH:/cvmfs/sft.cern.ch/lcg/external/lhapdfsets/current
      - cmake -S . -B BUILD -DCMAKE_INSTALL_PREFIX=$(pwd)/CM   $LARG
      - cmake --build BUILD -j $NCOMPILATION_JOBS
      - cmake --install BUILD
      - ctest --test-dir BUILD --output-on-failure
  artifacts:
    expire_in: 7 days
    paths:
      - BUILD/Tests/
    when: on_failure

##########################################################################
##########################################################################

.check_commit_CentOS:
  stage: check_if_dockerfile_updated
  image:
        name: alpine/git
        entrypoint: [""]
  script:
        - rm -rf todo-CentOS_$FREL.txt
        - git log -1 | grep CentOSDockerfile$FREL | head -n 1 >> todo-CentOS_$FREL.txt || touch todo-CentOS_$FREL.txt
        - git diff --name-only HEAD HEAD~1 | grep CI/CentOS/Dockerfile$FREL | head -n 1 >> todo-CentOS_$FREL.txt || touch todo-CentOS_$FREL.txt
        - if [ -s todo-CentOS_$FREL.txt ]; then cat CI/CentOS/Dockerfile$FREL  > todo-CentOS_$FREL.txt; fi
        - if [ $CI_PIPELINE_SOURCE == "schedule" ]; then cat CI/CentOS/Dockerfile$FREL  > todo-CentOS_$FREL.txt; fi
        - cat todo-CentOS_$FREL.txt
        - exit 0
  variables:
    GIT_DEPTH: "3"
  artifacts:
    paths:
      - todo-CentOS_$FREL.txt
    expire_in: 1 day

.check_commit_Archlinux:
  stage: check_if_dockerfile_updated
  image:
        name: alpine/git
        entrypoint: [""]
  script:
        - rm -rf todo-Archlinux_$FREL.txt
        - git log -1 | grep ArchlinuxDockerfile$FREL | head -n 1 >> todo-Archlinux_$FREL.txt || touch todo-Archlinux_$FREL.txt
        - git diff --name-only HEAD HEAD~1 | grep CI/Archlinux/Dockerfile | head -n 1 >> todo-Archlinux_$FREL.txt || touch todo-Archlinux_$FREL.txt
        - if [ -s todo-Archlinux_$FREL.txt ]; then cat CI/Archlinux/Dockerfile  > todo-Archlinux_$FREL.txt; fi
        - if [ $CI_PIPELINE_SOURCE == "schedule" ]; then cat CI/Archlinux/Dockerfile  > todo-Archlinux_$FREL.txt; fi
        - cat todo-Archlinux_$FREL.txt
        - exit 0
  variables:
    GIT_DEPTH: "3"
  artifacts:
    paths:
      - todo-Archlinux_$FREL.txt
    expire_in: 1 day

.check_commit_Fedora:
  stage: check_if_dockerfile_updated
  image:
        name: alpine/git
        entrypoint: [""]
  script:
        - rm -rf todo-Fedora_$FREL.txt
        - git log -1 | grep FedoraDockerfile$FREL | head -n 1 >> todo-Fedora_$FREL.txt || touch todo-Fedora_$FREL.txt
        - git diff --name-only HEAD HEAD~1 | grep CI/Fedora/Dockerfile | head -n 1 >> todo-Fedora_$FREL.txt || touch todo-Fedora_$FREL.txt
        - if [ -s todo-Fedora_$FREL.txt ]; then cat CI/Fedora/Dockerfile | sed 's/fedora:35/fedora:'$FREL'/g' > todo-Fedora_$FREL.txt; fi
        - if [ $CI_PIPELINE_SOURCE == "schedule" ]; then cat CI/Fedora/Dockerfile | sed 's/fedora:35/fedora:'$FREL'/g' > todo-Fedora_$FREL.txt; fi
        - cat todo-Fedora_$FREL.txt
        - exit 0
  variables:
    GIT_DEPTH: "3"
  artifacts:
    paths:
      - todo-Fedora_$FREL.txt
    expire_in: 1 day

.build_image_Archlinux:
  stage: build_docker_image
  image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
  script:
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
        - if [ -s todo-Archlinux_$FREL.txt ]; then /kaniko/executor --context $CI_PROJECT_DIR --dockerfile todo-Archlinux_$FREL.txt --destination $CI_REGISTRY_IMAGE:Archlinux_$FREL ; fi
  variables:
    GIT_DEPTH: "1"
  retry: 2

.build_image_Fedora:
  stage: build_docker_image
  image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
  script:
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
        - if [ -s todo-Fedora_$FREL.txt ]; then /kaniko/executor --context $CI_PROJECT_DIR --dockerfile todo-Fedora_$FREL.txt --destination $CI_REGISTRY_IMAGE:Fedora_$FREL ; fi
  variables:
    GIT_DEPTH: "1"
  retry: 2

.build_image_Fedora_alt:
  stage: build_docker_image
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo $CI_REGISTRY_IMAGE  $CI_REGISTRY
    - if [ -s todo-Fedora_$FREL.txt ]; then docker build --file todo-Fedora_$FREL.txt -t $CI_REGISTRY_IMAGE:Fedora_$FREL ; fi
    - if [ -s todo-Fedora_$FREL.txt ]; then docker push $CI_REGISTRY_IMAGE:Fedora_$FREL ; fi
  variables:
    GIT_DEPTH: "1"
  retry: 2

.build_image_CentOS:
  stage: build_docker_image
  image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
  script:
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
        - if [ -s todo-CentOS_$FREL.txt ]; then /kaniko/executor --context $CI_PROJECT_DIR --dockerfile todo-CentOS_$FREL.txt --destination $CI_REGISTRY_IMAGE:CentOS_$FREL ; fi
  variables:
    GIT_DEPTH: "1"
  retry: 2

.any:
  image: $CI_REGISTRY_IMAGE:${OS}_${FREL}
  stage: build
  before_script:
    - set -x
    - uname -a
    - cat /etc/issue
    - export GIT_DEPTH=1
  coverage: '/^\s*lines\.+: (\d+\.\d+)%/'
  artifacts:
    expire_in: 2 days
    paths:
      - BUILD/Tests/*/*.pdf
      - BUILD/Tests/*/rivet-plots
      - BUILD/Tests/coverage.info
      - BUILD/Tests/html
    when: on_failure

.cmake: &cmake
    - export CMAKE=cmake3
    - export CTEST=ctest3
    - if [ "${FREL}" == "7" ]; then export CMAKE=cmake3; CTEST=ctest3; fi
    - if [ "${FREL}" == "0" ]; then export CMAKE=cmake; CTEST=ctest; fi
    - export COMPILATIONSTART=$(date +%s)
    - $CMAKE --version
    - $CMAKE -S . -B BUILD -DCMAKE_INSTALL_PREFIX=$(pwd)/CM  $EXTRACMAKEFLAGS $CACHINGFLAGS
    - $CMAKE --build BUILD -j $NCOMPILATION_JOBS
    - export COMPILATIONEND=$(date +%s)
    - $CMAKE --install BUILD
    - echo $COMPILATIONSTART $COMPILATIONEND $(echo $COMPILATIONEND-$COMPILATIONSTART | bc -l)
    - $CTEST --test-dir BUILD --output-on-failure
    - if [[ $EXTRACMAKEFLAGS == *"ENABLE_COVERAGE"* ]]; then $CMAKE --build BUILD --target coverage; fi
    - if [[ $EXTRACMAKEFLAGS == *"ENABLE_COVERAGE"* ]]; then lcov --summary BUILD/Tests/coverage.info; fi
    - if [ "$BUILDDOCS" ]; then $CMAKE --build BUILD --target docs; fi

.ex:  &ex
    - if [ "${TOOLSET}" == "LLVM" ]; then export CXX=clang++; export CC=clang; export FC=gfortran; fi
    - if [ "${TOOLSET}" == "GNU" ]; then export CXX=g++; export CC=gcc; export FC=gfortran; fi

.any-cmake:
  extends: .any
  script:
      - *ex
      - *cmake

.any-cmake-ccache:
  extends: .any
  before_script:
    - *ex
    # Cache cleanup logic
    - if [ "$CI_COMMIT_MESSAGE" = "cleancache" ]; then rm -rf cmake-$TOOLSET-cache-$FREL; fi
    - if [ "$CI_PIPELINE_SOURCE" = "schedule" ]; then rm -rf cmake-$TOOLSET-cache-$FREL; fi
    - df -h ./
    - df -h /tmp
    # Set ccache limits to prevent unbounded growth
    - export CCACHE_BASEDIR=`pwd`/cmake-$TOOLSET-cache-$FREL
    - export CCACHE_DIR=`pwd`/cmake-$TOOLSET-cache-$FREL/ccache
    - export CCACHE_MAXSIZE=${CCACHE_MAXSIZE:-500M}
    - export CCACHE_COMPRESS=${CCACHE_COMPRESS:-1}
    - export CCACHE_COMPILERCHECK=${CCACHE_COMPILERCHECK:-content}
    - mkdir -p ${CCACHE_DIR}
    - mkdir -p ${CCACHE_BASEDIR}
    # f90cache setup with size limits
    - export F90CACHE_DIR=`pwd`/cmake-$TOOLSET-cache-$FREL/f90cache
    - export F90CACHE_TMPDIR=`pwd`/tmpf90cache
    - export F90CACHE_MAXSIZE=300M
    - mkdir -p ${F90CACHE_DIR}
    - mkdir -p ${F90CACHE_TMPDIR}
    - export CACHINGFLAGS="-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_Fortran_COMPILER_LAUNCHER=f90cache"
    - 'if [ "${FREL}" == "7" ]; then export CACHINGFLAGS="-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache "; fi'
    - 'if [ "${FREL}" == "0" ]; then export CACHINGFLAGS="-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache "; fi'
    # Display cache stats
    - ccache -s || true
  script:
    - *cmake
  cache:
    - key: cmake-$TOOLSET-cache-$FREL
      paths:
        - cmake-$TOOLSET-cache-$FREL/
      # Use variable to control policy based on branch
      policy: pull
      when: on_success

# Override for main branch to enable push
.any-cmake-ccache-main:
  extends: .any-cmake-ccache
  cache:
    - key: cmake-$TOOLSET-cache-$FREL
      paths:
        - cmake-$TOOLSET-cache-$FREL/
      policy: pull-push
      when: on_success

###########################################################################
# Here we check if we have changes to the Docker files

check_commit_Fedora42:
  variables:
    OS: Fedora
    FREL: 42
  extends: .check_commit_Fedora

check_commit_Fedora41:
  variables:
    OS: Fedora
    FREL: 41
  extends: .check_commit_Fedora

check_commit_CentOS9:
  variables:
    OS: centOS
    FREL: 9
  extends: .check_commit_CentOS

check_commit_Archlinux0:
  variables:
    OS: Archlinux
    FREL: 0
  extends: .check_commit_Archlinux

###########################################################################

###########################################################################
#Build images
build_image_Fedora42:
  variables:
    OS: Fedora
    FREL: 42
  extends: .build_image_Fedora
  needs:
    - job: check_commit_Fedora42

build_image_Fedora41:
  variables:
    OS: Fedora
    FREL: 41
  extends: .build_image_Fedora
  needs:
    - job: check_commit_Fedora41

build_image_CentOS9:
  variables:
    OS: CentOS
    FREL: 9
  extends: .build_image_CentOS
  needs:
    - job: check_commit_CentOS9

build_image_Archlinux0:
  variables:
    OS: Archlinux
    FREL: 0
  extends: .build_image_Archlinux
  needs:
    - job: check_commit_Archlinux0

###########################################################################

# Main branch jobs use pull-push policy
Fedora41-make-ccache-GNU:
  variables:
    OS: Fedora
    FREL: 41
    TOOLSET: GNU
    EXTRACMAKEFLAGS: $COMMON_EXTRA_CMAKE_FLAGS $EXTENDED_EXTRA_CMAKE_FLAGS $DOXYGEN_CMAKE_FLAGS
    BUILDDOCS: 1
  extends: .any-cmake-ccache-main
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: never
  needs:
    - job: build_image_Fedora41
      optional: true

# Feature branch variant uses pull-only policy
Fedora41-make-ccache-GNU-feature:
  variables:
    OS: Fedora
    FREL: 41
    TOOLSET: GNU
    EXTRACMAKEFLAGS: $COMMON_EXTRA_CMAKE_FLAGS $EXTENDED_EXTRA_CMAKE_FLAGS $DOXYGEN_CMAKE_FLAGS
    BUILDDOCS: 1
  extends: .any-cmake-ccache
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  needs:
    - job: build_image_Fedora41
      optional: true

Fedora42-make-ccache-GNU:
  variables:
    OS: Fedora
    FREL: 42
    TOOLSET: GNU
    EXTRACMAKEFLAGS: $COMMON_EXTRA_CMAKE_FLAGS $EXTENDED_EXTRA_CMAKE_FLAGS $DOXYGEN_CMAKE_FLAGS
    BUILDDOCS: 1
  extends: .any-cmake-ccache-main
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: never
  needs:
    - job: build_image_Fedora42
      optional: true

Fedora42-make-ccache-GNU-feature:
  variables:
    OS: Fedora
    FREL: 42
    TOOLSET: GNU
    EXTRACMAKEFLAGS: $COMMON_EXTRA_CMAKE_FLAGS $EXTENDED_EXTRA_CMAKE_FLAGS $DOXYGEN_CMAKE_FLAGS
    BUILDDOCS: 1
  extends: .any-cmake-ccache
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  needs:
    - job: build_image_Fedora42
      optional: true

Fedora42-make-ccache-LLVM:
  variables:
    OS: Fedora
    FREL: 42
    TOOLSET: LLVM
    EXTRACMAKEFLAGS: $COMMON_EXTRA_CMAKE_FLAGS $EXTENDED_EXTRA_CMAKE_FLAGS $DOXYGEN_CMAKE_FLAGS
    BUILDDOCS: 1
  extends: .any-cmake-ccache-main
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: never
  needs:
    - job: build_image_Fedora42
      optional: true

Fedora42-make-ccache-LLVM-feature:
  variables:
    OS: Fedora
    FREL: 42
    TOOLSET: LLVM
    EXTRACMAKEFLAGS: $COMMON_EXTRA_CMAKE_FLAGS $EXTENDED_EXTRA_CMAKE_FLAGS $DOXYGEN_CMAKE_FLAGS
    BUILDDOCS: 1
  extends: .any-cmake-ccache
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  needs:
    - job: build_image_Fedora42
      optional: true

CentOS9-make-ccache-GNU:
  variables:
    OS: CentOS
    FREL: 9
    TOOLSET: GNU
    EXTRACMAKEFLAGS: $COMMON_EXTRA_CMAKE_FLAGS
  extends: .any-cmake-ccache-main
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: never
  needs:
    - job: build_image_CentOS9
      optional: true

CentOS9-make-ccache-GNU-feature:
  variables:
    OS: CentOS
    FREL: 9
    TOOLSET: GNU
    EXTRACMAKEFLAGS: $COMMON_EXTRA_CMAKE_FLAGS
  extends: .any-cmake-ccache
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  needs:
    - job: build_image_CentOS9
      optional: true

Archlinux0-make-ccache-GNU:
  variables:
    OS: Archlinux
    FREL: 0
    TOOLSET: GNU
    EXTRACMAKEFLAGS: $COMMON_EXTRA_CMAKE_FLAGS $CATCH2_CMAKE_FLAGS $DOXYGEN_CMAKE_FLAGS
    BUILDDOCS: 1
  extends: .any-cmake-ccache-main
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: never
  needs:
    - job: build_image_Archlinux0
      optional: true

Archlinux0-make-ccache-GNU-feature:
  variables:
    OS: Archlinux
    FREL: 0
    TOOLSET: GNU
    EXTRACMAKEFLAGS: $COMMON_EXTRA_CMAKE_FLAGS $CATCH2_CMAKE_FLAGS $DOXYGEN_CMAKE_FLAGS
    BUILDDOCS: 1
  extends: .any-cmake-ccache
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  needs:
    - job: build_image_Archlinux0
      optional: true

