## If you have questions or requests contact Valentin Boettcher <hiro@protagon.space> (Gitlab: vale9811)

#image: "registry.gitlab.com/sherpa-team/sherpa-docker-build/slim"

#variables:
  #DOCKER_DRIVER: overlay2
  #CONFIGURE_FLAGS: --enable-analysis --enable-ewsud --with-libzip=/usr --with-lhapdf=install
  #MAKE_FLAGS: -j4

#.build_template: &build
  #stage: build
  #before_script:
    ## set up ccache
    #- mkdir -p ccache
    #- export CCACHE_BASEDIR=${PWD}
    #- export CCACHE_DIR=${PWD}/ccache
    #- export CCACHE_COMPILERCHECK=content
    ## enable gold linker
    #- ln -sf ld.gold /usr/bin/ld

  ## accelerate git-clone by making it shallow
  #variables:
    #GIT_DEPTH: "3"
  ## cache ccache
  #cache:
    #paths:
      #- ccache/

##
## Build
##

## default build with gcc
#build:
  #<<: *build
  #script:
    #- autoreconf -i
    #- mkdir -p build
    #- cd build
    #- ../configure CC="ccache gcc" CXX="ccache g++" --prefix="$PWD/install" $CONFIGURE_FLAGS
    #- make $MAKE_FLAGS
    #- make install
    #- VERBOSE=1 make check
  ## store what's required to run the tests
  #artifacts:
    #expire_in: 2 days
    #paths:
      #- build/install
      #- Examples/CI/

## build with clang and -Werror
#build-clang-strict:
  #<<: *build
  #script:
    #- autoreconf -i
    #- mkdir -p build-clang-strict
    #- cd build-clang-strict
    ## enable strict compilation
    #- cxxflags="-Werror -Wno-error=unused-function"
    #- ../configure CC="ccache clang" CXX="ccache clang++" CXXFLAGS="${cxxflags}" --prefix="$PWD/install" $CONFIGURE_FLAGS
    #- make $MAKE_FLAGS
    #- make install
    #- VERBOSE=1 make check
  ## store what's required to run the tests
  #artifacts:
    #expire_in: 2 days
    #paths:
      #- build-clang-strict/install
      #- Examples/CI/

#build-manual:
  #stage: build
  #image: registry.gitlab.com/sherpa-team/sherpa-docker-build
  #script:
    #- autoreconf -i
    #- mkdir -p build
    #- cd Manual
    #- pip3 install -r requirements.txt
    #- cd ../build
    #- ../configure --enable-manual --with-libzip=/usr --with-lhapdf=install
    #- cd Manual
    #- make
    #- make sherpamanual_html
  #artifacts:
    #expire_in: 2 days
    #paths:
      #- build/Manual
  #rules:
    #- changes:
        #- Manual/**/*
      #when: always
    #- when: never

##
## Test
##

## define test runs as single jobs; this is less dynamic then just cycling
## through all sub-directories of Examples/CI, but it makes sure that all test
## jobs will be run simultaneously; at least we use anchors and map merging to
## inherit parameters set in .test_template

#.test_template: &test
  #stage: test
  #variables:
    #GIT_STRATEGY: none  # we only need the artifacts from the build

#test-LO_Z: &test_lo_z
  #<<: *test
  #needs:
    #- build
  #script:
    #- mkdir test-LO_Z
    #- cd test-LO_Z
    #- ../build/install/bin/Sherpa ../Examples/CI/LO_Z/Sherpa.yaml

#test-LO_Z-Amegic:
  #<<: *test_lo_z
  #script:
    #- mkdir test-LO_Z-Amegic
    #- cd test-LO_Z-Amegic
    #- ../build/install/bin/Sherpa ../Examples/CI/LO_Z/Sherpa.yaml ME_GENERATORS:Amegic
    #- ./makelibs
    #- ../build/install/bin/Sherpa ../Examples/CI/LO_Z/Sherpa.yaml ME_GENERATORS:Amegic

#test-clang-strict-LO_Z:
  #<<: *test
  #needs:
    #- build-clang-strict
  #script:
    #- mkdir test-clang-strict-LO_Z
    #- cd test-clang-strict-LO_Z
    #- ../build-clang-strict/install/bin/Sherpa ../Examples/CI/LO_Z/Sherpa.yaml

##
## Deploy
##


## Rebuild the Website to include this tag in the changelogs.
#trigger_pages:
  #stage: deploy
  #variables:
    #GIT_STRATEGY: none  # we only need the artifacts from the build
  #rules:
    #- if: '$CI_COMMIT_TAG'
      #when: always
    #- when: never
  #script:
    #- "curl -X POST -F token=$PAGES_TRIGGER_TOKEN -F ref=master https://gitlab.com/api/v4/projects/8892644/trigger/pipeline"
  #needs: []

## build the dist-tarball
#dist:
  #stage: deploy
  #rules:
    #- if: '$CI_COMMIT_TAG'
      #when: always
    #- when: never
  #image: registry.gitlab.com/sherpa-team/sherpa-docker-build
  #script:
    #- autoreconf -i
    #- cd Manual
    #- pip3 install -r requirements.txt
    #- cd ..
    #- mkdir -p build
    #- cd build
    #- ../configure $CONFIGURE_FLAGS --enable-manual # build the manual into the dist tarball
    #- make dist

    ## upload to gitlab releases
    #- "REL=$(git describe --abbrev=0 --tags)"
    #- "TARBALL=$(ls *.tar.gz | cut -d ' ' -f1)"
    #- 'URL=$(curl --request POST --header "PRIVATE-TOKEN: $UPLOAD_TOKEN" --form "file=@./$TARBALL" https://gitlab.com/api/v4/projects/13884060/uploads | grep -o -P "\"url\":\"(.*?)\"" | sed "s/\"//g" | sed "s/url://")' # TODO: use regex
    #- "echo $URL"
    #- 'curl --request POST --header "PRIVATE-TOKEN: $UPLOAD_TOKEN" --data name="$TARBALL" --data url="https://gitlab.com/vale9811/sherpa$URL" "https://gitlab.com/api/v4/projects/13884060/releases/$REL/assets/links"'
    #- 'curl --request POST --header "PRIVATE-TOKEN: $UPLOAD_TOKEN" --data name="Manual" --data url="https://sherpa-team.gitlab.io/sherpa/$REL/" "https://gitlab.com/api/v4/projects/13884060/releases/$REL/assets/links"'

## Build Manual
#pages:
  #image: registry.gitlab.com/sherpa-team/sherpa-docker-build
  #stage: deploy
  #script:
    #- cd Manual
    #- git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
    #- git fetch --all
    #- git checkout master  # we only build with master config, because
                           ## this will get uploaded globaly
    #- git pull
    #- pip3 install -r requirements.txt
    #- pip3 install sphinx-multiversion
    #- bash .build_versioned.sh build
    #- mv build/_multi ../public
  #artifacts:
    #paths:
    #- public
  #rules:
    #- changes:
        #- Manual/**/*
      #when: always
    #- when: never

.Fedora: &Fedora
#  only:
#    variables:
#     - $CI_SERVER_HOST=="gitlab.cern.ch"
  before_script:
    - set -x
    - uname -a 
    - cat /etc/issue
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL dnf-plugins-core bc make cmake binutils wget diffutils file sed gawk grep which autoconf automake libtool python3-lhapdf lhapdf lhapdf-devel 'tex(latex)' ghostscript 'tex(sectsty.sty)' > rpm.log || (cat rpm.log && exit 1)
    - dnf -y copr enable averbyts/HEPrpms 
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   gcc-gfortran gcc-c++ root pythia8-devel pythia8   Rivet Rivet-devel hztool > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   root-core root HepMC3-rootIO-devel HepMC3-devel HepMC3-search HepMC3-search-devel  HepMC3-rootIO HepMC3  HepMC HepMC-devel  > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   autoconf automake libtool sqlite-devel sqlite subversion root-physics libzip-devel openmpi-devel gosam > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   openmpi environment-modules lhapdf-devel fastjet fastjet-devel  YODA-devel Rivet-devel zlib zlib-devel > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   swig  recola qd qd-devel openssl-devel openssl > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   blackhat-devel blackhat > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   texinfo git latexmk  > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   python3 python3-devel bzip2 > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   cernlib cernlib-devel cernlib-static > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   MCFM MG5_aMC openloops > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   cmake sphinx python3-sphinx python3-sphinxcontrib-bibtex > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL   'tex(atbegshi.sty)' 'tex(babel.sty)' 'tex(bigintcalc.sty)' 'tex(bitset.sty)' 'tex(etexcmds.sty)' 'tex(gettitlestring.sty)'  > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL       'tex(iftex.sty)' 'tex(ifvtex.sty)' 'tex(infwarerr.sty)' 'tex(intcalc.sty)' 'tex(kvdefinekeys.sty)' 'tex(kvsetkeys.sty)' > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL      'tex(ltxcmds.sty)' 'tex(pdfescape.sty)' 'tex(pdftexcmds.sty)' 'tex(uniquecounter.sty)' 'tex(amsfonts.sty)' 'tex(amssymb.sty)'  > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL     'tex(amsbsy.sty)' 'tex(amsgen.sty)' 'tex(amsmath.sty)' 'tex(amsopn.sty)' 'tex(amstext.sty)' 'tex(atveryend.sty)' 'tex(auxhook.sty)' 'tex(alltt.sty)'  > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL     'tex(atbegshi-ltx.sty)' 'tex(atveryend-ltx.sty)' 'tex(fontenc.sty)' 'tex(inputenc.sty)' 'tex(makeidx.sty)' 'tex(textcomp.sty)' 'tex(capt-of.sty)'  > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL     'tex(cmap.sty)' 'tex(epstopdf-base.sty)' 'tex(fancyhdr.sty)' 'tex(fancyvrb.sty)' 'tex(float.sty)' 'tex(fncychap.sty)' 'tex(framed.sty)'  > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL     'tex(geometry.sty)' 'tex(color.sty)' 'tex(graphics.sty)' 'tex(graphicx.sty)' 'tex(keyval.sty)' 'tex(trig.sty)' 'tex(hycolor.sty)' 'tex(hyperref.sty)'  > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL     'tex(nameref.sty)' 'tex(kvoptions.sty)' 'tex(letltxmacro.sty)' 'tex(needspace.sty)' 'tex(hypcap.sty)' 'tex(parskip-2001-04-09.sty)' 'tex(parskip.sty)' > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL      'tex(refcount.sty)' 'tex(rerunfilecheck.sty)' 'tex(tabulary.sty)' 'tex(tgheros.sty)' 'tex(tgtermes.sty)' 'tex(titlesec.sty)' 'tex(array.sty)'  > rpm.log || (cat rpm.log && exit 1)
    - yum -y  install --setopt=keepcache=1 --setopt=cachedir=`pwd`/yum-cache-$FREL      'tex(longtable.sty)' 'tex(multicol.sty)' 'tex(upquote.sty)' 'tex(url.sty)' 'tex(varwidth.sty)' 'tex(wrapfig.sty)' 'tex(xcolor.sty)' > rpm.log || (cat rpm.log && exit 1)
    
Fedora35-autotools:
  image: fedora:35
  variables:
    FREL: 35  
  extends: .Fedora
  script:
    - export COMPILATIONSTART=$(date +%s)
    - autoreconf -fi
    -  ./configure  --prefix=$(pwd)/AT  --disable-rpath  --enable-rivet=/usr  --enable-cernlib=/usr/lib64/cernlib/2022  --enable-blackhat=$(blackhat-config --prefix)     --enable-gzip --enable-recola=/usr  --enable-hztool=/usr   --enable-hepevtsize=4000    --enable-hepmc3=/usr --enable-hepmc3root   --libdir=$(pwd)/AT/lib64   --enable-openloops=/usr/lib64/openloops --enable-hepmc2=/usr  --enable-root=/usr  --enable-binreloc   --enable-pythia --enable-lhole --enable-lhapdf=/usr --enable-manual --enable-ewsud --enable-gosam=/usr
    - make -j 10
    - make -C Manual
    - export COMPILATIONEND=$(date +%s)
    - make install
    - make -C Manual install
    - echo $COMPILATIONSTART $COMPILATIONEND $(echo $COMPILATIONEND-$COMPILATIONSTART | bc -l)
  cache:
    key: yum-cache-$FREL
    paths:
      - yum-cache-$FREL/
      
Fedora35-cmake:
  image: fedora:35
  variables:
    FREL: 35
  extends: .Fedora
  script:
    - export COMPILATIONSTART=$(date +%s)
    - cmake -S . -B BUILD -DCMAKE_INSTALL_PREFIX=$(pwd)/CM -DCMAKE_CXX_FLAGS="-O2 -g -fcx-fortran-rules" -DCMAKE_C_FLAGS="-O2 -g" -DCMAKE_Fortran_FLAGS="-O2 -g"
    - cmake --build BUILD -j 10
    - export COMPILATIONEND=$(date +%s)
    - cmake --install BUILD
    - echo $COMPILATIONSTART $COMPILATIONEND $(echo $COMPILATIONEND-$COMPILATIONSTART | bc -l)
  cache:
    key: yum-cache-$FREL
    paths:
      - yum-cache-$FREL/
