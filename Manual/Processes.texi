@node Processes
@section Processes

The process setup takes the following general form

@verbatim
PROCESSES:
# Process 1:
- Process: <process declaration>
  <parameter>: <value>
  <multiplities-to-be-applied-to>:
    <parameter>: <value>
    ...
# Process 2:
- Process: <process declaration>
  ...
@end verbatim

I.e. @code{PROCESSES} followed by a list of process definitions.  Each process
definition has one mandatory sub-setting, @code{Process}, which defines the
initial- and final-state particles.

In addition, several optional parameters steer the process setup.  Most of them
can be grouped under a multiplicity key, which can either be a single integer
or a range of integers, e.g. @code{2-4: @{ <settings-that-affect-only-multiplicties-2-to-4> @}}.

The following parameters are used to steer the process setup:

@menu
* Process::                 The process setup start tag.
* Decay::                   Tag to add an exclusive decay.
* DecayOS::                 Tag to add an exclusive on-shell decay.
* No_Decay::                Tag to remove resonant diagrams.
* Scales::                  Tag to set a process-specific scale.
* Couplings::               Tag to set process-specific couplings.
* CKKW::                    Tag to setup multijet merging.
* Process_Selectors::       Tag to specify a specific selector file.
* Order::                   Tag to fix the coupling order.
* Max_Order::               Tag to fix the maximum coupling order.
* Min_Order::               Tag to fix the minimum coupling order.
* Min_N_Quarks::            Tag to set the minimum number of quarks.
* Max_N_Quarks::            Tag to set the maximum number of quarks.
* Min_N_TChannels::         Tag to request a minimum number of t-channels.
* Max_N_TChannels::         Tag to request a maximum number of t-channels.
* Print_Graphs::            Tag to enable writeout of feynman graphs.
* Name_Suffix::             Tag to set a unique name suffix.
* Integration_Error::       Tag to set a specific integration error.
* Max_Epsilon::             Tag to set a specific epsilon for overweighting.
* Enhance_Factor::          Tag to set an enhance factor.
* RS_Enhance_Factor::       Tag to set an enhance factor for the RS-piece of 
                            an MC@@NLO process.
* Enhance_Function::        Tag to set an enhance function.
* Enhance_Observable::      Tag to set an enhance observable.
* NLO_Mode::                Tag to set up NLO processes.
* NLO_Part::                Tag to refine the setup of NLO processes.
* NLO_Order::               Tag to specify the relative order of the NLO calculation.
* Subdivide_Virtual::       Tag to split virtual contribution into pieces.
* ME_Generator::            Tag to specifiy the tree ME generator.
* RS_ME_Generator::         Tag to specifiy the real-subtracted ME generator
                            of an MC@@NLO process.
* Loop_Generator::          Tag to specifiy the loop ME generator.
* Integrator::              Tag to specifiy the integrator.
* PSI_ItMin::               Tag to set the number of points per optimization step.
* RS_PSI_ItMin::            Tag to set the number of points per optimization step
                            in real-minus-subtraction parts.
* Special Group::           Manual grouping of flavour processes for integration
* End process::             The process setup end tag.
@end menu


@node Process
@subsection Process
This tag starts the setup of a process or a set of processes 
with common properties. It must be followed by the specification 
of the (core) process itself. The initial and
final state particles are specified by their PDG codes, or by 
particle containers, see @ref{Particle containers}. Examples are

@table @code
@item Process: 93 93 -> 11 -11
Sets up a Drell-Yan process group with light quarks
in the initial state.
@item Process: "11 -11 -> 93 93 93@{3@}"
Sets up jet production in e+e- collisions with up to three
additional jets.
@end table

The syntax for specifying processes is explained in the following 
sections:

@menu
* PDG codes::
* Particle containers::
* Parentheses::
* Curly brackets::
@end menu

@node PDG codes
@subsubsection PDG codes

Initial and final state particles are specified using their 
PDG codes
(cf. @uref{http://pdg.lbl.gov/2009/mcdata/mc_particle_id_contents.html,,PDG}).
A list of particles with their codes, and some of their properties,
is printed at the start of each Sherpa run, when the @ref{OUTPUT} is set 
at level @option{2}.

@node Particle containers
@subsubsection Particle containers

Sherpa contains a set of containers that collect
particles with similar properties, namely

@itemize @bullet
  @item  lepton (carrying number @code{90}), 
  @item  neutrino (carrying number @code{91}),
  @item  fermion (carrying number @code{92}),
  @item  jet (carrying number @code{93}),
  @item  quark (carrying number @code{94}).
@end itemize

These containers hold all massless particles and anti-particles 
of the denoted type and allow for a more efficient definition of 
initial and final states to be considered. The jet container consists 
of the gluon and all massless quarks, as set by
@verbatim
PARTICLE_DATA:
  <id>:
    Mass: 0
    # ... and/or ...
    Massive: false
@end verbatim

A list of particle containers
is printed at the start of each Sherpa run, when the @ref{OUTPUT} is set 
at level @option{2}. 

@cindex PARTICLE_CONTAINER
It is also possible to define a custom particle container using the keyword 
@code{PARTICLE_CONTAINER}. The container must be given an unassigned particle
ID (kf-code) and its name (freely chosen by you) and the flavour content must
be specified.
An example would be the collection of all down-type quarks using the unassigned
ID 98, which could be declared as
@verbatim
PARTICLE_CONTAINER:
  98:
    Name: downs
    Flavours: [1, -1, 3, -3, 5, -5]
@end verbatim

Note that, if wanted, you have to add both particles and anti-particles.


@node Parentheses
@subsubsection Parentheses

The parenthesis notation allows to group a list of processes with different 
flavor content but similar structure. This is most useful in the context of 
simulations containing heavy quarks.
In a setup with massive b-quarks, for example, the b-quark will not be part 
of the jets container. In order to include b-associated processes easily,
the following can be used:
@verbatim
PARTICLE_DATA:
  5: {Massive: true}
PARTICLE_CONTAINER:
  98: {Name: B, Flavours: [5, -5]}
PROCESSES:
- Process: "11 -11 -> (93,98) (93,98)"
  ...
@end verbatim


@node Curly brackets
@subsubsection Curly brackets

The curly bracket notation when specifying a process allows up to 
a certain number of jets to be included in the final state. This
is easily seen from an example, 
@table @code
@item Process: "11 -11 -> 93 93 93@{3@}"
Sets up jet production in e+e- collisions. The matix element final state may be
2, 3, 4 or 5 light partons or gluons.
@end table


@node Decay
@subsection Decay
Specifies the exclusive decay of a particle produced in the
matrix element. The virtuality of the decaying particle is sampled
according to a Breit-Wigner distribution. In practice this amouts to 
selecting only those diagrams containing s-channels of the specified 
flavour while the phase space is kept general. Consequently, all 
spin correlations are preserved.
An example would be
@verbatim
Process: 11 -11 -> 6[a] -6[b]
Decay:     6[a] -> 5 24[c]
Decay:    -6[b] -> -5 -24[d]
Decay:    24[c] -> -13 14
Decay:   -24[d] -> 94 94
@end verbatim


@node DecayOS
@subsection DecayOS
Specifies the exclusive decay of a particle produced in the
matrix element. The decaying particle is on mass-shell, i.e.
a strict narrow-width approximation is used. This tag can be
specified alternatively as @option{DecayOS}. In practice this amouts to 
selecting only those diagrams containing s-channels of the specified 
flavour and the phase space is factorised as well. Nonetheless, all spin 
correlations are preserved.
An example would be
@verbatim
Process: 11 -11 -> 6[a] -6[b]
DecayOS:   6[a] -> 5 24[c]
DecayOS:  -6[b] -> -5 -24[d]
DecayOS:  24[c] -> -13 14
DecayOS: -24[d] -> 94 94
@end verbatim


@node No_Decay
@subsection No_Decay
Remove all diagrams associated with the decay/s-channel of the given flavours.
Serves to avoid resonant contributions in processes like W-associated
single-top production. Note that this method breaks gauge invariance!
At the moment this flag can only be set for Comix.
An example would be
@verbatim
Process: "93 93 -> 6[a] -24[b] 93{1}"
Decay:     6[a] -> 5 24[c]
DecayOS:  24[c] -> -13 14
DecayOS: -24[b] -> 11 -12
No_Decay: -6
@end verbatim


@node Scales
@subsection Scales
Sets a process-specific scale.
For the corresponding syntax see @ref{SCALES}.

@node Couplings
@subsection Couplings
Sets process-specific couplings.
For the corresponding syntax see @ref{COUPLINGS}.

@node CKKW
@subsection CKKW
Sets up multijet merging according to @mycite{Hoeche2009rj}.
The additional argument specifies the parton separation criterion ("merging cut") Q_@{cut@} in GeV.
It can be given in any form which is understood by the internal
interpreter, see @ref{Interpreter}. Examples are

@itemize
@item Hadronic collider: @code{CKKW: 20}
@item Leptonic collider: @code{CKKW: pow(10,-2.5/2.0)*E_CMS}
@item DIS: @code{CKKW: $(QCUT)/sqrt(1.0+sqr($(QCUT)/$(SDIS))/Abs2(p[2]-p[0]))}
@end itemize


@node Process_Selectors
@subsection Process_Selectors
Using @code{Selectors: [<selector 1>, <selector 2>]} in a process definition
sets up process-specific selectors. They use the same syntax as describes in
@ref{Selectors}.


@node Order
@subsection Order
Sets a process-specific coupling order.
Orders are counted at the amplitude level. 
For example, the process 1 -1 -> 2 -2 would have
orders @code{@{QCD: 2, EW: 0@}}, @code{@{QCD: 1, EW: 1@}} and
@code{@{QCD: 0, EW: 2@}}. There can also be a third entry
that is model specific (e.g. for HEFT couplings). Half-integer
orders are so far supported only by Comix.
The word "Any" can be used as a wildcard.

Note that for decay chains this setting applies to
the full process, see @ref{Decay} and @ref{DecayOS}.


@node Max_Order
@subsection Max_Order
Sets a process-specific maximum coupling order.
See @ref{Order} for the syntax and additional information.


@node Min_Order
@subsection Min_Order
Sets a process-specific minimum coupling order.
See @ref{Order} for the syntax and additional information.


@node Min_N_Quarks
@subsection Min_N_Quarks
Limits the minimum number of quarks in the process to the
given value.


@node Max_N_Quarks
@subsection Max_N_Quarks
Limits the maximum number of quarks in the process to the
given value.


@node Min_N_TChannels
@subsection Min_N_TChannels
Limits the minimum number of t-channel propagators in the process 
to the given value.

@node Max_N_TChannels
@subsection Max_N_TChannels
Limits the maximum number of t-channel propagators in the process 
to the given value.

@node Print_Graphs
@subsection Print_Graphs
Writes out Feynman graphs in LaTeX format. The parameter specifies a 
directory name in which the diagram information is stored. This directory 
is created automatically by Sherpa. The LaTeX source files can be compiled 
using the command
@verbatim
  ./plot_graphs <graphs directory>
@end verbatim
which creates an html page in the graphs directory that can be viewed 
in a web browser.

@node Name_Suffix
@subsection Name_Suffix
Defines a unique name suffix for the process.

@node Integration_Error
@subsection Integration_Error
Sets a process-specific relative integration error target.
An example to specify an error target of 2% for
2->3 and 2->4 processes would be:
@verbatim
Process: "93 93 -> 93 93 93{2}"
3-4:
  Integration_Error: 0.02
@end verbatim


@node Max_Epsilon
@subsection Max_Epsilon
Sets epsilon for maximum weight reduction.
The key idea is to allow weights larger than
the maximum during event generation,
as long as the fraction of the cross section
represented by corresponding events is
at most the epsilon factor times the total
cross section. In other words, the relative
contribution of overweighted events to the
inclusive cross section is at most epsilon.


@node Enhance_Factor
@subsection Enhance_Factor
Sets a process specific enhance factor.

@node RS_Enhance_Factor
@subsection RS_Enhance_Factor
Sets an enhance factor for the RS-piece of an MC@@NLO process.

@node Enhance_Function
@subsection Enhance_Function
Sets a process specific enhance function.

@emph{This feature can only be used when generating weighted events.}

Note that the convergence of the Monte Carlo integration can be worse
if enhance functions are employed and therefore the integration can take
significantly longer. The reason is that the default phase space
mapping, which is constructed according to diagrammatic information from
hard matrix elements, is not suited for event generation including
enhancement. It must first be adapted, which, depending on the enhance
function and the final state multiplicity, can be an intricate task.

@emph{If Sherpa cannot achieve an integration error target due to the use
 of enhance functions, it might be appropriate to locally redefine this
 error target}, see @ref{Integration_Error}.

@node Enhance_Observable
@subsection Enhance_Observable

Allows for the specification of a ME-level observable in which the event
generation should be flattened. Of course, this induces an appropriate weight
for each event. This option is available for both weighted and unweighted event
generation, but for the latter as mentioned above the weight stemming from the
enhancement is introduced.

An example would be
@verbatim
Process: "93 93 -> 11 -11 93{1}"
3:
  Enhance_Observable: VAR{log10(PPerp(p[2]+p[3]))}|1|3
@end verbatim

Here, the 1-jet process is flattened with respect to the logarithmic transverse
momentum of the lepton pair in the limits 1.0 (10 GeV) to 3.0 (1 TeV).
For the calculation of the observable one can use any function available in
the algebra interpreter (see @ref{Interpreter}).

Note that the convergence of the Monte Carlo integration can be worse
if enhance observables are employed and therefore the integration can take
significantly longer. The reason is that the default phase space 
mapping, which is constructed according to diagrammatic information from
hard matrix elements, is not suited for event generation including
enhancement. It must first be adapted, which, depending on the enhance 
function and the final state multiplicity, can be an intricate task. 

@emph{If Sherpa cannot achieve an integration error target due to the use
 of enhance functions, it might be appropriate to locally redefine this
 error target}, see @ref{Integration_Error}.


@node NLO_Mode
@subsection NLO_Mode

This setting specifies whether and in which mode an NLO calculation 
should be performed. Possible values are:

@table @code
@item Fixed_Order
perform a fixed-order next-to-leading order calculation
@item MC@@NLO
perform an MC@@NLO-type matching of a fixed-order next-to-leading order
calculation to the resummation of the parton shower
@end table

The usual multiplicity identifier apply to this switch as well.
Note that this setting implies @code{NLO_Part: BVIRS} for the relevant
multiplicities. This can be overridden by setting @code{NLO_Part} 
explicitly in case of fixed-order calculations.

Note that Sherpa includes only a very limited selection of one-loop 
corrections. For processes not included external codes can be interfaced, 
see @ref{External one-loop ME}


@node NLO_Part
@subsection NLO_Part

In case of fixed-order NLO calculations this switch specifies which pieces 
of a NLO calculation are computed. Possible choices are

@table @code
@item B
born term
@item V
virtual (one-loop) correction
@item I
integrated subtraction terms
@item RS
real correction, regularized using Catani-Seymour subtraction terms
@end table

Different pieces can be combined in one processes setup. Only pieces with the 
same number of final state particles and the same order in alpha_S and alpha 
can be treated as one process, otherwise they will be automatically split up.

@node NLO_Order
@subsection NLO_Order

Specifies the relative order of the NLO correction wrt. the considered Born
process. For example, @code{NLO_Order: @{QCD: 1, EW: 0@}} specifies a QCD
correction while @code{NLO_Order: @{QCD: 0, EW: 1@}} specifies an EW
correction.

@node Subdivide_Virtual
@subsection Subdivide_Virtual

Allows to split the virtual contribution to the total cross section into pieces.
Currently supported options when run with @url{http://projects.hepforge.org/blackhat,BlackHat}
are @option{LeadingColor} and @option{FullMinusLeadingColor}. For high-multiplicity
calculations these settings allow to adjust the relative number of points in the
sampling to reduce the overall computation time.

@node ME_Generator
@subsection ME_Generator
Set a process specific nametag for the desired
tree-ME generator, see @ref{ME_GENERATORS}.

@node RS_ME_Generator
@subsection RS_ME_Generator
Set a process specific nametag for the desired
ME generator used for the real minus subtraction part
of NLO calculations. See also @ref{ME_GENERATORS}.

@node Loop_Generator
@subsection Loop_Generator
Set a process specific nametag for the desired
loop-ME generator. The only Sherpa-native option is @code{Internal} with a few 
hard coded loop matrix elements. Other loop matrix elements are provided by
external libraries.


@node Integrator
@subsection Integrator
Sets a process-specific integrator, see @ref{INTEGRATOR}.

@node PSI_ItMin
@subsection PSI_ItMin
Sets the number of points per optimization step, see @ref{PSI}.

@node RS_PSI_ItMin
@subsection RS_PSI_ItMin
Sets the number of points per optimization step in real-minus-subtraction
parts of fixed-order and MC@@NLO calculations, see @ref{PSI}.

@node Special Group
@subsection Special Group
Allows to split up individual flavour processes within a process group for
integrating them separately. This can help improve the integration/unweighting
efficiency. Note: Only works with Comix so far.
Example for usage:
@verbatim
Process 93 93 -> 11 -11 93
Special Group(0-1,4)
[...]
End process
Process 93 93 -> 11 -11 93
Special Group(2-3,5-7)
[...]
End process
@end verbatim
The numbers for each individual process can be found using a script in the 
AddOns directory: @code{AddOns/ShowProcessIds.sh Process/Comix.zip}

@node End process
@subsection End process
Completes the setup of a process or a list of processes
with common properties.

